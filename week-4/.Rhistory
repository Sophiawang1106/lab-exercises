# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
install.packages("curl")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View()
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
manu <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manu)
# Filter the data set for vehicles manufactured in 1997
vehicles["year" == 1997, "make"]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, "make"]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, "model"]
# Filter the data set for vehicles manufactured in 1997
V1997<- vehicles[vehicles$year == 1997, "model"]
order(V1997)
order(vehicles[V1997, vehicles$hwy])
order(vehicles[V1997, "hwy"])
#data analysis step
#1. question ofinterest 2. gather data 3. translate question into code
#4. implement and execute program 5. evaluate program results
#mutate : adding column
#Select, filter, arrange, summarize
install.packages("dplyr")
library(dplyr)
order(vehicles$hwy)
vehicles$hwy
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles[V1997,order(vehicles$hwy)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles[order(vehicles$hwy), "model"]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles[order(vehicles$hwy), V1997]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles[order(vehicles$hwy)]
# Filter the data set for vehicles manufactured in 1997
V1997<- vehicles[vehicles$year == 1997, "model"]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles[order(vehicles$hwy),"model" == V1997]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles[order(vehicles$hwy), vehicles$model == V1997]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles[vehicles$model == V1997, order(vehicles$hwy)]
vehicles$model == V1997
View(V1997)
View(V1997)
# Filter the data set for vehicles manufactured in 1997
V1997<- vehicles[vehicles$year == 1997, "model"]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
V1996[order(vehicles$hwy)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
V1997[order(vehicles$hwy)]
# Filter the data set for vehicles manufactured in 1997
V1997<- vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
V1997[order(V1997$hwy)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
V1997[,order(V1997$hwy)]
order(V1997$hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
V1997[order(V1997$hwy),]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
V1997$average <- (V1997$hwy + V1997$cty)/2
V2 <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty >20,]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
V2[order(V2$hwy),decreasing = FALSE]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
V2[order(V2$hwy), decreasing = FALSE]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
V2[order(V2$hwy)]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
V2[order(V2$hwy),]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
V2["id", V2$hwy == min( V2$hwy)]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
V2[V2$hwy == min( V2$hwy),V2$id]
V2$hwy == min(V2$hwy)
V2$id
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
V2[V2$hwy == min(V2$hwy),V2$id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
V2$id[V2$hwy == min(V2$hwy)]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car <- function(year,make){
newdata<- vehicles[vehicles$year == year & vehicles$make == make, c(vehicles$hwy, vehicles$model)]
newdata[newdata$hwy == max(newdata$hwy), "model"]
}
# What was the most efficient Honda model of 1995?
car(1995,"Honda")
newdata<- vehicles[vehicles$year == 1995 & vehicles$make == "Honda" c(vehicles$hwy, vehicles$model)]
newdata<- vehicles[vehicles$year == 1995 & vehicles$make == "Honda", c(vehicles$hwy, vehicles$model)]
newdata<- vehicles[(vehicles$year == 1995 & vehicles$make == "Honda"), c("hwy", "vehicles$model")]
newdata<- vehicles[(vehicles$year == 1995 & vehicles$make == "Honda"), c("hwy", "model")]
newdata[newdata$hwy == max(newdata$hwy), "model"]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car <- function(year,make){
newdata<- vehicles[(vehicles$year == year & vehicles$make == make), c("hwy", "model")]
newdata[newdata$hwy == max(newdata$hwy), "model"]
}
# What was the most efficient Honda model of 1995?
car(1995,"Honda")
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
library(dplyr)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
filter(vehicles, unique(make))
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
filter(vehicles, unique(makes))
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
filter(vehicles, makes)
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
filter(vehicles, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
filter(vehicles, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, unique(make))
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
unique(select(vehicles,make))
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
car <- select(vehicles,make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(car)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
dis_car <- distinct(car)
count(dis_car)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Filter the data set for vehicles manufactured in 1997
V1997<- filter(vehicles, year == 1997)
arrange(V1997, hwy)
mutate(V1997, average = (cty+hwy)/2
mutate(V1997, average = (cty+hwy)/2)
mutate(V1997, average = (cty+hwy)/2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(V1997, drive = "2-Wheel Drive", cty>20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(V1997, drive == "2-Wheel Drive", cty>20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(V1997, drive = "2-Wheel Drive", cty>20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(V1997, drive == "2-Wheel Drive", cty>20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(V1997, drive == "2-Wheel Drive", cty>20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
f <- filter(V1997, drive == "2-Wheel Drive", cty>20)
as.data.frame(vehicles)
v ,- as.data.frame(vehicles)
v <- as.data.frame(vehicles)
# Filter the data set for vehicles manufactured in 1997
V1997<- filter(v, year == 1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
f <- filter(V1997, drive == "2-Wheel Drive", cty>20)
typeof(vehicles)
typeof(v)
View(vehicles)
is.data.frame(vehicles)
View(V1997)
View(V1997)
V2 <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty >20,]
View(V2)
View(V2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
f <- filter(vehicles, drive == "2-Wheel Drive", cty>20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2-Wheel Drive", cty>20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicles, hwy = min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicles, hwy == min(hwy)), id)
filter(vehicles, hwy == min(hwy))
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
car <- filter(vehicles, drive == "2-Wheel Drive", cty>20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(car, hwy == min(hwy)), id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
model <- function(year,make){
select(filter(vehicles,hwy == max(hwy),year ==year,make == make), model)
}
# What was the most efficient Honda model of 1995?
model(1995,"Honda")
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura <- filter(vehicles, make == 'Acura', year == 2015)
best_acura <- filter(acura, hwy == max(hwy))
best_model <- select(best_acura, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
best_model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)
), model
)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
best_model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)
), model
)
best_model <- filter(vehicles, make == 'Acura', year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
# Write 3 functions, one for each approach.  Then,
# Test how long it takes to perform each one 1000 times
model1 <- function() {
acura <- filter(vehicles, make == 'Acura', year == 2015)
best_acura <- filter(acura, hwy == max(hwy))
best_model <- select(best_acura, model)
}
model2 <- function() {
best_model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)
), model
)
}
model3 <- function() {
best_model <- filter(vehicles, make == 'Acura', year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
system.time(for (i in 1:1000) model1())
system.time(for (i in 1:1000) model2())
system.time(for (i in 1:1000) model3())
# Exercise 7: DPLYR practice with NBA data
# install.packages("dplyr")
library(dplyr)
setwd("C:/Users/ADMIN/lab-exercises/week-4")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv("data/team.data", header = TRUE)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv("data/team.csv", header = TRUE)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv("data//team.csv", header = TRUE)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv("team.csv", header = TRUE)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv("teams.csv", header = TRUE)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv("data/teams.csv", header = TRUE)
# Exercise 7: DPLYR practice with NBA data
# install.packages("dplyr")
library(dplyr)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv("data/teams.csv", header = TRUE)
is.data.frame(team)
# The data.frame team.data should now be accessible to you.
# View it, and get some basic information about the number of rows/columns.
# Note the "X" preceding some of the column titles as well as the "*"
# following the names of teams that made it to the playoffs that year.
View(team)
nrow(team)
ncol(team)
teams <- mutate(teams, turnovers = TOV/STL)
team <- mutate(team, turnovers = TOV/STL)
# Sort the teams from lowest turnover/steal ratio to highest
team <- arrange(team, turnover)
# Sort the teams from lowest turnover/steal ratio to highest
team <- arrange(team, turnovers)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
sub_team <- select(filter(team, TBR == max(TRB)),Team,TRB)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
sub_team <- select(filter(team, TBR == max(TRB)),Team,TRB)
filter(team, TBR == max(TRB))
filter(team, TBR == max(TRB))
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
sub_team <- select(filter(team, TRB == max(TRB)),Team,TRB)
View(sub_team)
View(sub_team)
print(select(sub_team, Team))
# Read in the Pokemon data from the data directory
# into a variable called `pokemon` using `read.csv`. Remember to not read strings in as factors.
po <- read.csv("data/pokemon.csv", header = TRUE,stringsAsFactors = FALSE)
# First, View() the data set to see what info you have to work with
is.data.frame(po)
View(po)
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
water.pkm <- filter(po, Type.1 == "Water")
# Group the pokemon by Type 2 and save into a descriptive variable
group_p <- group_by(po, Type2)
# Group the pokemon by Type 2 and save into a descriptive variable
group_p <- group_by(po, Type.2)
# View your new variable -- did it affect anything?
View(group_p)
# Group the pokemon by Type 2 and save into a descriptive variable
group_p <- group_by(po, Type.2)
# View your new variable -- did it affect anything?
View(group_p)
View(po)
# Read in the Pokemon data from the data directory
# into a variable called `pokemon` using `read.csv`. Remember to not read strings in as factors.
po <- read.csv("data/pokemon.csv",stringsAsFactors = FALSE)
# First, View() the data set to see what info you have to work with
is.data.frame(po)
View(po)
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
water.pkm <- filter(po, Type.1 == "Water")
View(water.pkm)
View(water.pkm)
# Group the pokemon by Type 2 and save into a descriptive variable
group_p <- group_by(po, Type.2)
# View your new variable -- did it affect anything?
View(group_p)
# Group the pokemon by Type 2 and save into a descriptive variable
group_p <- group_by(po, Type.1)
# Group the pokemon by Type 2 and save into a descriptive variable
group_p <- group_by(po, Type.2)
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
water.pkm <- po %>% filter(Type.1 == "Water")
# Group the pokemon by Type 2 and save into a descriptive variable
grouped.water.pkm <- water.pkm %>% group_by(Type.2)
View(grouped.water.pkm)
View(grouped.water.pkm)
# Use summarize() to figure out what the mean (average) speed is for
# each different type in type 2 and what the maximum HP (health point) value is
# within each group.
generation <- grouped.water.pkm %>% summarize("Mean speed" = mean(Speed), "Max HP" = max(HP))
View(generation)
View(generation)
# New pokemon are released in generations. Aggregate the data on generations
# using summarize() to look at the minimum and maximum attack and defense values
# across generations for Pokemon that are not "Legendary".
pokemon.new<- po %>% filter(Legendary == "False") %>% group_by(Generation) %>% summarize("Maximum attack" = max(Attack), "Minimum attack" = min(Attack), "Maximum defense" = max(Defense), "Minimum defense" = min(Defense))
